# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Install openssl for SSL certificate generation if needed
RUN apk add --no-cache openssl

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configurations
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY nginx-ssl.conf /etc/nginx/conf.d/ssl.conf.template

# Create script to choose configuration based on SSL availability
RUN echo '#!/bin/sh' > /docker-entrypoint-custom.sh && \
    echo 'if [ -f "/etc/nginx/ssl/fullchain.pem" ] && [ -f "/etc/nginx/ssl/privkey.pem" ]; then' >> /docker-entrypoint-custom.sh && \
    echo '  echo "SSL certificates found, enabling HTTPS configuration"' >> /docker-entrypoint-custom.sh && \
    echo '  cp /etc/nginx/conf.d/ssl.conf.template /etc/nginx/conf.d/default.conf' >> /docker-entrypoint-custom.sh && \
    echo 'else' >> /docker-entrypoint-custom.sh && \
    echo '  echo "No SSL certificates found, using HTTP configuration"' >> /docker-entrypoint-custom.sh && \
    echo 'fi' >> /docker-entrypoint-custom.sh && \
    echo 'exec "$@"' >> /docker-entrypoint-custom.sh && \
    chmod +x /docker-entrypoint-custom.sh

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint-custom.sh"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
